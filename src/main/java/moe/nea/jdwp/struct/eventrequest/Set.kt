package moe.nea.jdwp.struct.eventrequest

import moe.nea.jdwp.*
import moe.nea.jdwp.primitives.*
import moe.nea.jdwp.base.*

/**
 * Set an event request. When the event described by this request occurs, an [event](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_Event) is sent from the target VM. If an event occurs that has not been requested then it is not sent from the target VM. The two exceptions to this are the VM Start Event and the VM Death Event which are automatically generated events - see [Composite Command](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_Event_Composite) for further details.
 * [External](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_EventRequest_Set)
 */
class Set : JDWPComposite(), JDWPCommandPayload<SetReply> {
    /**
     * Event kind to request. See [JDWP.EventKind](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_EventKind) for a complete list of events that can be requested; some events may require a capability in order to be requested.
     */
    var eventKind by useField(JDWPByte())
    /**
     * What threads are suspended when this event occurs? Note that the order of events and command replies accurately reflects the order in which threads are suspended and resumed. For example, if a [VM-wide resume](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_VirtualMachine_Resume) is processed before an event occurs which suspends the VM, the reply to the resume command will be written to the transport before the suspending event.
     */
    var suspendPolicy by useField(JDWPByte())
    /**
     * Constraints used to control the number of generated events.Modifiers specify additional tests that an event must satisfy before it is placed in the event queue. Events are filtered by applying each modifier to an event in the order they are specified in this collection Only events that satisfy all modifiers are reported. A value of 0 means there are no modifiers in the request.Filtering can improve debugger performance dramatically byreducing the amount of event traffic sent from the target VM to the debugger VM.
     */
    var modifiers by useField(JDWPInt())
    var modifiersElements by useField(JDWPExternalVector(this::modifiers, ::SetModifiersElement))
    override val reply = SetReply()
    override val commandId: UByte get() = 1.toUByte()
    override val commandSetId: UByte get() = 15.toUByte()
}
/**
 * Reply for [Set]
 */
class SetReply : JDWPComposite(), JDWPReplyPayload {
    /**
     * ID of created request
     */
    var requestID by useField(JDWPInt())
}




/**
 * Component for [Set]
 */
class SetModifiersElement : JDWPComposite() {
    /**
     * Modifier kind
     */
    var modKind by useField(JDWPByte())
    /**
     * Limit the requested event to be reported at most once after a given number of occurrences.  The event is not reported the first count - 1 times this filter is reached. To request a one-off event, call this method with a count of 1. Once the count reaches 0, any subsequent filters in this request are applied. If none of those filters cause the event to be suppressed, the event is reported. Otherwise, the event is not reported. In either case subsequent events are never reported for this request. This modifier can be used with any event kind.
     */
    var Count by useField(JDWPCase(this::modKind, 1, SetCount()))
    /**
     * Conditional on expression
     */
    var Conditional by useField(JDWPCase(this::modKind, 2, SetConditional()))
    /**
     * Restricts reported events to those in the given thread. This modifier can be used with any event kind except for class unload.
     */
    var ThreadOnly by useField(JDWPCase(this::modKind, 3, SetThreadOnly()))
    /**
     * For class prepare events, restricts the events generated by this request to be the preparation of the given reference type and any subtypes. For monitor wait and waited events, restricts the events generated by this request to those whose monitor object is of the given reference type or any of its subtypes. For other events, restricts the events generated by this request to those whose location is in the given reference type or any of its subtypes. An event will be generated for any location in a reference type that can be safely cast to the given reference type. This modifier can be used with any event kind except class unload, thread start, and thread end.
     */
    var ClassOnly by useField(JDWPCase(this::modKind, 4, SetClassOnly()))
    /**
     * Restricts reported events to those for classes whose name matches the given restricted regular expression. For class prepare events, the prepared class name is matched. For class unload events, the unloaded class name is matched. For monitor wait and waited events, the name of the class of the monitor object is matched. For other events, the class name of the event's location is matched. This modifier can be used with any event kind except thread start and thread end.
     */
    var ClassMatch by useField(JDWPCase(this::modKind, 5, SetClassMatch()))
    /**
     * Restricts reported events to those for classes whose name does not match the given restricted regular expression. For class prepare events, the prepared class name is matched. For class unload events, the unloaded class name is matched. For monitor wait and waited events, the name of the class of the monitor object is matched. For other events, the class name of the event's location is matched. This modifier can be used with any event kind except thread start and thread end.
     */
    var ClassExclude by useField(JDWPCase(this::modKind, 6, SetClassExclude()))
    /**
     * Restricts reported events to those that occur at the given location. This modifier can be used with breakpoint, field access, field modification, step, and exception event kinds.
     */
    var LocationOnly by useField(JDWPCase(this::modKind, 7, SetLocationOnly()))
    /**
     * Restricts reported exceptions by their class and whether they are caught or uncaught. This modifier can be used with exception event kinds only.
     */
    var ExceptionOnly by useField(JDWPCase(this::modKind, 8, SetExceptionOnly()))
    /**
     * Restricts reported events to those that occur for a given field. This modifier can be used with field access and field modification event kinds only.
     */
    var FieldOnly by useField(JDWPCase(this::modKind, 9, SetFieldOnly()))
    /**
     * Restricts reported step events to those which satisfy depth and size constraints. This modifier can be used with step event kinds only.
     */
    var Step by useField(JDWPCase(this::modKind, 10, SetStep()))
    /**
     * Restricts reported events to those whose active 'this' object is the given object. Match value is the null object for static methods. This modifier can be used with any event kind except class prepare, class unload, thread start, and thread end. Introduced in JDWP version 1.4.
     */
    var InstanceOnly by useField(JDWPCase(this::modKind, 11, SetInstanceOnly()))
    /**
     * Restricts reported class prepare events to those for reference types which have a source name which matches the given restricted regular expression. The source names are determined by the reference type's [ SourceDebugExtension](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_ReferenceType_SourceDebugExtension). This modifier can only be used with class prepare events. Since JDWP version 1.6. Requires the canUseSourceNameFilters capability - see [CapabilitiesNew](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_VirtualMachine_CapabilitiesNew).
     */
    var SourceNameMatch by useField(JDWPCase(this::modKind, 12, SetSourceNameMatch()))
}


/**
 * Component for [Set]
 */
class SetCount : JDWPComposite() {
    /**
     * Count before event. One for one-off.
     */
    var count by useField(JDWPInt())
}


/**
 * Component for [Set]
 */
class SetConditional : JDWPComposite() {
    /**
     * For the future
     */
    var exprID by useField(JDWPInt())
}


/**
 * Component for [Set]
 */
class SetThreadOnly : JDWPComposite() {
    /**
     * Required thread
     */
    var thread by useField(JDWPThreadId())
}


/**
 * Component for [Set]
 */
class SetClassOnly : JDWPComposite() {
    /**
     * Required class
     */
    var clazz by useField(JDWPReferenceTypeId())
}


/**
 * Component for [Set]
 */
class SetClassMatch : JDWPComposite() {
    /**
     * Required class pattern. Matches are limited to exact matches of the given class pattern and matches of patterns that begin or end with '*'; for example, "*.Foo" or "java.*".
     */
    var classPattern by useField(JDWPString())
}


/**
 * Component for [Set]
 */
class SetClassExclude : JDWPComposite() {
    /**
     * Disallowed class pattern. Matches are limited to exact matches of the given class pattern and matches of patterns that begin or end with '*'; for example, "*.Foo" or "java.*".
     */
    var classPattern by useField(JDWPString())
}


/**
 * Component for [Set]
 */
class SetLocationOnly : JDWPComposite() {
    /**
     * Required location
     */
    val loc by useField(JDWPLocation())
}


/**
 * Component for [Set]
 */
class SetExceptionOnly : JDWPComposite() {
    /**
     * Exception to report. Null (0) means report exceptions of all types. A non-null type restricts the reported exception events to exceptions of the given type or any of its subtypes.
     */
    var exceptionOrNull by useField(JDWPReferenceTypeId())
    /**
     * Report caught exceptions
     */
    var caught by useField(JDWPBoolean())
    /**
     * Report uncaught exceptions. Note that it is not always possible to determine whether an exception is caught or uncaught at the time it is thrown. See the exception event catch location under [composite events](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_Event_Composite) for more information.
     */
    var uncaught by useField(JDWPBoolean())
}




/**
 * Component for [Set]
 */
class SetFieldOnly : JDWPComposite() {
    /**
     * Type in which field is declared.
     */
    var declaring by useField(JDWPReferenceTypeId())
    /**
     * Required field
     */
    var fieldID by useField(JDWPFieldId())
}



/**
 * Component for [Set]
 */
class SetStep : JDWPComposite() {
    /**
     * Thread in which to step
     */
    var thread by useField(JDWPThreadId())
    /**
     * size of each step. See [JDWP.StepSize](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_StepSize)
     */
    var size by useField(JDWPInt())
    /**
     * relative call stack limit. See [JDWP.StepDepth](https://docs.oracle.com/en/java/javase/17/docs/specs/jdwp/jdwp-protocol.html#JDWP_StepDepth)
     */
    var depth by useField(JDWPInt())
}




/**
 * Component for [Set]
 */
class SetInstanceOnly : JDWPComposite() {
    /**
     * Required 'this' object
     */
    var instance by useField(JDWPObjectId())
}


/**
 * Component for [Set]
 */
class SetSourceNameMatch : JDWPComposite() {
    /**
     * Required source name pattern. Matches are limited to exact matches of the given pattern and matches of patterns that begin or end with '*'; for example, "*.Foo" or "java.*".
     */
    var sourceNamePattern by useField(JDWPString())
}


